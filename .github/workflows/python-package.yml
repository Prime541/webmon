# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:


  test-cov:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"
    - name: Install dependencies for Build
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade build
    - name: Build the package
      run: |
        python -m build
    - name: Install the package [local-sources]
      run: |
        pip install -e .
    - name: Install dependencies for pytest-cov
      run: |
        pip install pytest pytest-cov
    - name: Test with pytest-cov
      run: |
        pytest --cov --cov-report=html:htmlcov -vv
    - name: Upload code coverage results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: htmlcov
        path: htmlcov


  build-dist:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"
    - name: Install dependencies for Build
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade build
    - name: Build the package
      run: |
        python -m build
    - name: Upload the package
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist


  test:
    needs: build-dist

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
    - name: Download the package
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist
    - name: Install the package
      run: |
        pip install dist/webmon-*.tar.gz
    - name: Uninstall the package
      run: |
        pip uninstall --yes webmon
    - name: Reinstall the package
      run: |
        pip install dist/webmon-*.tar.gz

    - name: Install dependencies for pytest
      run: |
        pip install pytest
    - name: Test with pytest
      run: |
        pytest -vv


  quality:
    needs: build-dist

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
    - name: Download the package
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist
    - name: Install the package[test]
      run: |
        pip install $(echo dist/webmon-*.tar.gz)[test]

    - name: Lint with pylint
      run: |
        pylint --disable=line-too-long $(git ls-files '*.py')
    - name: Lint with bandit
      run: |
        bandit -r $(git ls-files '*.py')
    - name: Lint with flake8-quotes
      run: |
        flake8 --ignore=E501 $(git ls-files '*.py')
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  end-to-end:
    if: github.event_name == 'push'
    needs: test

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
    - name: Download the package
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist
    - name: Install the package
      run: |
        pip install dist/webmon-*.tar.gz
    - name: Retrieve the secret files
      run: |
        printf '%s' "${{ secrets.CONFIG_YAML_DEFAULT }}" > config.yaml
        printf '%s' "${{ secrets.CA_PEM_DEFAULT }}" > ca.pem
        printf '%s' "${{ secrets.SERVICE_CERT_DEFAULT }}" > service.cert
        printf '%s' "${{ secrets.SERVICE_KEY_DEFAULT }}" > service.key
    - name: Run webmon for 1m
      run: |
        timeout --signal INT --preserve-status --kill-after 10s 1m \
          python3 -m webmon -v \
            --website-regex-period "https://www.google.com" "<title>Google</title>" 2 \
            --website-regex-period "https://google.com" "<title>Google</title>" 3 \
            --website-regex-period "https://bing.com" "<title>Bing</title>" 5 \
            --website-regex-period "https://yahoo.com" "<title>Bing</title>" 7 \
          2>&1 | \
        tee webmon.log | grep -v '^INFO:kafka'
        RC=$?
        echo RC=$RC
        [ $RC = 0 ] || [ $RC = 130 ]
    - name: Upload webmon.log
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: webmon.log
        path: webmon.log